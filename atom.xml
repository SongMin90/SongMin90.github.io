<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SongM</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-30T05:59:21.532Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SongM</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github Pages + Hexo创建个人博客</title>
    <link href="http://yoursite.com/2017/10/30/Test/"/>
    <id>http://yoursite.com/2017/10/30/Test/</id>
    <published>2017-10-30T05:55:00.000Z</published>
    <updated>2017-10-30T05:59:21.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是hexo："><a href="#什么是hexo：" class="headerlink" title="什么是hexo："></a>什么是hexo：</h2><p><code>hexo</code>是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管到github或者Heroku上，类似于jekyll、Octopress、Wordpress等，使用markdown来写文章。hexo的作者是<a href="https://github.com/tommy351/hexo" title="@tommy351" target="_blank" rel="external">https://github.com/tommy351/hexo</a>。具有以下几点优点：</p><ul><li>易用性，部署很简单，常用指令有：<code>hexo new</code>、<code>hexo generate</code>、<code>hexo server</code>、<code>hexo deploy</code>；</li><li>轻量级，文件少而小，自定义方便</li></ul><h2 id="相关知识："><a href="#相关知识：" class="headerlink" title="相关知识："></a>相关知识：</h2><p>hexo配置过程中使用到了<code>Github</code>，<code>Git</code>，<code>Markdown</code>，<code>Node.js</code>等相关操作，所以需要很多插件、widget需要自己安装配置。<br><a id="more"></a></p><h2 id="安装准备："><a href="#安装准备：" class="headerlink" title="安装准备："></a>安装准备：</h2><ol><li>Node.js:<a href="https://nodejs.org/en/" title="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a> ；</li><li>Github桌面版（Windows）：<a href="https://desktop.github.com/" title="https://desktop.github.com/" target="_blank" rel="external">https://desktop.github.com/</a>；</li></ol><h2 id="安装Github桌面版和配置"><a href="#安装Github桌面版和配置" class="headerlink" title="安装Github桌面版和配置"></a>安装Github桌面版和配置</h2><ol><li>双击下载好的<code>GitHubSetup.exe</code>文件，按照默认设置完成安装；</li><li>登录自己的github账号；</li></ol><p><img src="http://i.imgur.com/97nOEVO.png" alt=""></p><ol><li>在github网页上创建一个以<code>username.github.io</code>命名的repositories,此时username为自己github的账号名称；</li></ol><p><img src="http://i.imgur.com/A9cQrk6.png" alt=""></p><ol><li>打开Git Shell，使用配置SSH Key使本地git项目与远程Github建立联系：<code>ssh -T git@github.com</code>；</li></ol><p><img src="http://i.imgur.com/t33BM1G.png" alt=""></p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>直接双击下载好的<code>node-v4.5.0-x64.msi</code>选择指定的安装路径，按照默认设置完成安装操作，安装完成后不需要对Node.js进行任何配置。为了检验是否完成安装，可以打开命令行，输入指令：<code>npm --version</code>进行版本号查询。<br><img src="http://i.imgur.com/H21hK8M.png" alt=""></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo:"></a>安装Hexo:</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装:"></a>1.安装:</h3><pre><code>mkdir hexo #创建一个项目文件cd hexo    #进入项目文件目录npm install -g hexo-clinpm install hexo --save</code></pre><p>npm是Node.js中的一个工具，所以在安装Hexo之前应该先安装Node.js</p><h3 id="2-部署Hexo："><a href="#2-部署Hexo：" class="headerlink" title="2.部署Hexo："></a>2.部署Hexo：</h3><p>在Git shell中输入：</p><pre><code>hexo init</code></pre><p>记得输入之前需要确保当前命令行所处目录为所要创建工程的根目录下，因为此操作的结果就是将hexo的一些必要文件复制到当前目录下面。<br><img src="http://i.imgur.com/8bOaggs.png" alt=""><br>看到上图结果之后，可以通过以下指令运行博客：</p><pre><code>hexo server</code></pre><p><img src="http://i.imgur.com/OyexMqN.png" alt=""><br>运行正常的话可以通过访问：<a href="http://localhost:4000/" title="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>查看运行结果：</p><p><img src="http://i.imgur.com/Xy731Ig.png" alt=""></p><p>假如出现了hexo服务启动成功，但是浏览器访问localhost:4000一直不响应，那就有可能是因为你的设备上装了其他软件占用了4000端口，一般有两种办法可以解决：</p><ul><li>在服务管理中将占用该端口的服务停止掉，通常安装了福昕阅读器的就会占用4000，把其对应的后台服务关掉即可；</li><li><p>切换hexo启动的默认端口，使用以下指令：</p><p>  hexo s -p 5000</p></li></ul><p>此时启动端口就变成了5000，访问地址变成了localhost:5000。</p><h3 id="3-安装Hexo插件："><a href="#3-安装Hexo插件：" class="headerlink" title="3.安装Hexo插件："></a>3.安装Hexo插件：</h3><p>主要目的是为了让其自动生成sitemap，Rss，部署到git等，这些是额外的插件，假如不需要使用到这些功能可以不添加：</p><pre><code>npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save</code></pre><h2 id="将当前工程上传到github"><a href="#将当前工程上传到github" class="headerlink" title="将当前工程上传到github"></a>将当前工程上传到github</h2><h3 id="1-修改配置文件："><a href="#1-修改配置文件：" class="headerlink" title="1.修改配置文件："></a>1.修改配置文件：</h3><p>在当前项目的根目录下找到<code>_config.yml</code>配置文件，用编辑器打开，并找到Deployment标签处deploy节点，填写以下配置信息，<code>type</code>是指定拖过平台类型，<code>repository</code>指定了github上创建的repository仓库地址，<code>branch</code>指定了版本类型。（注：冒号后面需要加一个空格，否则会出现报错）</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: github  repository: https://github.com/linshuhe1/linshuhe1.github.io.git  branch: master</code></pre><h3 id="2-将项目deploy到github仓库："><a href="#2-将项目deploy到github仓库：" class="headerlink" title="2.将项目deploy到github仓库："></a>2.将项目deploy到github仓库：</h3><p>打开Git shell进入当前项目的根目录，依次执行指令：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>一般执行最后一步的时候会出现错误如下：<br><img src="http://i.imgur.com/68SebBI.png" alt=""><br>解决错误的方法是：将deploy的type改成git，然后在Git shell中执行：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>执行结束后再次执行上述三个指令，正确结果应该如下：<br><img src="http://i.imgur.com/G0wPCXU.png" alt=""><br>如此我们便完成了将本地的hexo工程deploy到github上的操作，访问地址：<a href="https://username.github.io/可以看到页面效果,这里以我的github为例：[https://linshuhe1.github.io/](https://linshuhe1.github.io/" target="_blank" rel="external">https://username.github.io/可以看到页面效果,这里以我的github为例：[https://linshuhe1.github.io/](https://linshuhe1.github.io/</a> “<a href="https://linshuhe1.github.io/&quot;)。" target="_blank" rel="external">https://linshuhe1.github.io/&quot;)。</a></p><h2 id="Hexo常用指令使用："><a href="#Hexo常用指令使用：" class="headerlink" title="Hexo常用指令使用："></a>Hexo常用指令使用：</h2><h3 id="创建新博文："><a href="#创建新博文：" class="headerlink" title="创建新博文："></a>创建新博文：</h3><p>在Git shell中使用以下指令：</p><pre><code>hexo new &quot;postName&quot;</code></pre><p>生成指定名称postName的文章到hexo\source_posts\postName.md，当然也可以直接到hexo\source_posts目录下，手动创建一个文件，命名时注意后缀名必须是“.md”即可。<br><img src="http://i.imgur.com/qjVQtnG.png" alt=""><br>可以打开查看新建出来的.md文件的内容：</p><pre><code>---title: github pages + Hexodate: 2016-09-02 17:17:52tags:---</code></pre><p><code>title</code>是博文的标题，<code>date</code>是博文的日期，<code>tags</code>是分类标签。</p><p>更详细的内容可以参考：<a href="https://hexo.io/docs/writing.html" title="Writing" target="_blank" rel="external">https://hexo.io/docs/writing.html</a></p><h3 id="新建页面："><a href="#新建页面：" class="headerlink" title="新建页面："></a>新建页面：</h3><p>上面的步骤其实就是新建一篇博文的步骤，他们最后都是通过一个文章页面来显示的单个子页，但是我们的博客页面出来需要有博文显示页面之后，还需要有其他的页面，每个页面相当于一个分类对应顶栏菜单中的一个页签，如下图首页、下载等都是一个页面，所以可以理解为页面就相当于子页的父节点：<br><img src="http://i.imgur.com/V33kn9P.png" alt=""><br>创建一个页签的操作是在Git shell中输入指令：</p><pre><code>hexo new page &quot;页签名称&quot;</code></pre><p>上述步骤操作结果是在hexo\source目录下多出一个文件夹，而且里面还有一个index.md，这就表明了我们新建了一个页签。</p><h3 id="运行博客："><a href="#运行博客：" class="headerlink" title="运行博客："></a>运行博客：</h3><p>使用Git shell在当前项目的根目录下执行以下指令：</p><pre><code>hexo server</code></pre><p>更详细的内容可以参考：<a href="http://hexo.io/docs/server.html" title="Server" target="_blank" rel="external">http://hexo.io/docs/server.html</a></p><h3 id="生成静态站点文件："><a href="#生成静态站点文件：" class="headerlink" title="生成静态站点文件："></a>生成静态站点文件：</h3><pre><code>hexo generate</code></pre><p>更详细的内容可以参考：<a href="http://hexo.io/docs/generating.html" title="Generating" target="_blank" rel="external">http://hexo.io/docs/generating.html</a></p><h2 id="发表一篇新博文"><a href="#发表一篇新博文" class="headerlink" title="发表一篇新博文"></a>发表一篇新博文</h2><h3 id="1-新建博文："><a href="#1-新建博文：" class="headerlink" title="1.新建博文："></a>1.新建博文：</h3><p>使用新建博文的指令：</p><pre><code>hexo new &quot;github pages + Hexo&quot;</code></pre><h3 id="2-编辑博文内容："><a href="#2-编辑博文内容：" class="headerlink" title="2.编辑博文内容："></a>2.编辑博文内容：</h3><p>打开步骤1创建得到的.md文件，使用的语法是markdown，假设内容如下：</p><pre><code>---title: github pages + Hexodate: 2016-09-02 17:17:52tags: 测试---&gt;测试博客</code></pre><h3 id="3-发表博文："><a href="#3-发表博文：" class="headerlink" title="3.发表博文："></a>3.发表博文：</h3><p>之前的内容中已经提到了将本地内容更新到github需要三个步骤：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>其实还有快捷的指令输入方式，如下：</p><pre><code>hexo g == hexo generatehexo d == hexo deployhexo s == hexo serverhexo n == hexo new# 还能组合使用，如：hexo d -g</code></pre><p>完成上述三个步骤，一篇新的博文就发表到github上面了。</p><h2 id="使用Next主题美化界面："><a href="#使用Next主题美化界面：" class="headerlink" title="使用Next主题美化界面："></a>使用Next主题美化界面：</h2><p>安装好hexo之后，主题使用的是hexo默认自带的<code>landscape</code>主题，Next主题是iissnan设计的，使用指南其实可以直接参考Next官方网：<a href="http://theme-next.iissnan.com/" title="Next" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p><h3 id="1-Next主题下载："><a href="#1-Next主题下载：" class="headerlink" title="1.Next主题下载："></a>1.Next主题下载：</h3><p>打开Git shell，在当前项目根目下使用git从github上checkout主题的代码，输入指令：</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p><img src="http://i.imgur.com/bGoWtvn.png" alt=""><br>下载完成后，在hexo\theme目录下回多出一个next文件夹，里面就是next主题所需的文件,当然我们也可以看到在theme文件目录还有一个landscape文件夹，这也就是hexo默认的主题。<br><img src="http://i.imgur.com/rqq71ts.png" alt=""></p><h3 id="2-配置主题："><a href="#2-配置主题：" class="headerlink" title="2.配置主题："></a>2.配置主题：</h3><p>之前我们配置hexo的时候，有用到<code>_config.yml</code>文件，称其为<strong>站点配置文件</strong>，而我们打开next主题文件夹，发现里面也有一个<code>_config.yml</code>文件，我们称这个为<strong>主题配置文件</strong>。在hexo中启用next主题的方式：就是打开站点配置文件，找到<code>theme</code>字段，将其值改为“next”，如下：</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next</code></pre><p>配置完成后，在Git shell中使用<code>hexo server</code>指令启动本地博客，在浏览器中访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>可以看到如下结果：<br><img src="http://i.imgur.com/ZKzamkL.png" alt=""></p><h3 id="3-next的样式选择："><a href="#3-next的样式选择：" class="headerlink" title="3.next的样式选择："></a>3.next的样式选择：</h3><p>next的样式其实有三种：Muse、Mist和Pisces，步骤2中看到的其实是next默认的模式Muse，根据官方说明三个样式的特点如下：</p><ul><li><strong>Muse：</strong> 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li><strong>Mist：</strong> Muse 的紧凑版本，整洁有序的单栏外观</li><li><strong>Pisces：</strong> 双栏 Scheme，小家碧玉似的清新</li></ul><p>切换的控制其实很简单，使用next主题配置文件中的<code>scheme</code>字段来控制，假设我们选择Mist样式（个人认为最好看的样式），操作步骤是：打开next文件夹中的<code>_config.yml</code>文件，找到<code>scheme</code>字段，将其设置为“Mist”，如下所示：</p><pre><code># ------------------------------------------------------# Scheme Settings# ------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces</code></pre><p>重新启动博客，刷新浏览器可以看到：<br><img src="http://i.imgur.com/6YFzhyz.png" alt=""></p><h2 id="额外的优化："><a href="#额外的优化：" class="headerlink" title="额外的优化："></a>额外的优化：</h2><h3 id="1-设置favicon："><a href="#1-设置favicon：" class="headerlink" title="1.设置favicon："></a>1.设置favicon：</h3><p>favicon的全称Favorites Icon，即地址栏左侧的图标：</p><p><img src="http://i.imgur.com/ZNLKFAE.png" alt=""></p><p>有个在线工具可以上传自己的图片去生成指定规格的favicon.ico文件：<a href="http://www.atool.org/ico.php" target="_blank" rel="external">http://www.atool.org/ico.php</a>。打开主题配置文件<code>_config.yml</code>可以看到favicon的配置信息：</p><pre><code># Put your favicon.ico into `hexo-site/source/` directory.favicon: /favicon.ico</code></pre><p>根据说明，我们将图标取名为<code>favicon.ico</code>然后放到当前工程的hexo\source目录下，重启博客即可生效。</p><h3 id="2-菜单栏控制："><a href="#2-菜单栏控制：" class="headerlink" title="2.菜单栏控制："></a>2.菜单栏控制：</h3><p>我们看到页面顶部的菜单栏，其实是由主题配置文件中的<code>menu</code>字段控制的，例如原本的样子是这样：<br><img src="http://i.imgur.com/iyg45Yj.png" alt=""></p><p>我们修改一下主题配置文件，如下把about页面前面的注释去掉，即让此页签处于显示状态：</p><pre><code># ------------------------------------------------------# Menu Settings# ------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu:  home: /  #categories: /categories  about: /about  archives: /archives  tags: /tags  #commonweal: /404.html</code></pre><p>重启博客可以看到效果如下：<br><img src="http://i.imgur.com/O6Z9NvT.png" alt=""></p><p>然而，点击打开About却出现了“Cannot GET /about/”的页面错误，这是因为我们还没有about这个页面，需要使用<code>hexo new page &quot;页面名称&quot;</code>进行创建：</p><pre><code>hexo new page about</code></pre><p>执行结果就是在hexo\source目录下面多出了一个about文件夹，里面有index.md，这就是点击About会展示的内容页面。同理，也可以创建tags页面。</p><h3 id="3-语言设置："><a href="#3-语言设置：" class="headerlink" title="3.语言设置："></a>3.语言设置：</h3><p>在站点配置文件中假如如下内容，明确指定使用的语言，例如中文：</p><pre><code>language: zh-Hans</code></pre><p>设置完毕后，发现菜单栏也发生了变化：<br><img src="http://i.imgur.com/Ekxi8Tv.png" alt=""></p><h3 id="4-侧栏设置："><a href="#4-侧栏设置：" class="headerlink" title="4.侧栏设置："></a>4.侧栏设置：</h3><p>在主题配置文件的<code>sidebar</code>字段，此处我直接设置为侧栏一直显示，而且显示在右边：</p><pre><code>sidebar:  # Sidebar Position, available value: left | right  position: left  #position: right  # Sidebar Display, available value:  #  - post    expand on posts automatically. Default.  #  - always  expand for all pages automatically  #  - hide    expand only when click on the sidebar toggle icon.  #  - remove  Totally remove sidebar including sidebar toggler.  #display: post  display: always  #display: hide  #display: remove</code></pre><h3 id="5-设置头像和作者名称："><a href="#5-设置头像和作者名称：" class="headerlink" title="5.设置头像和作者名称："></a>5.设置头像和作者名称：</h3><p>在站点配置文件中，新加一个字段<code>avatar</code>，值就是头像的连接地址，这里我使用站内地址，将avatar.png放到本地目录hexo\source\images中；作者名称直接设置站点配置文件中<code>author</code>字段的值：</p><pre><code># Sitetitle: Linsh-何乐不为~subtitle:description:author: Linshuheavatar: /images/avatar.pnglanguage: zh-Hanstimezone:</code></pre><h2 id="第三方服务："><a href="#第三方服务：" class="headerlink" title="第三方服务："></a>第三方服务：</h2><h3 id="1-多说评论："><a href="#1-多说评论：" class="headerlink" title="1.多说评论："></a>1.多说评论：</h3><p>进入多说官网，登录后点击“我要登录”，填写相关信息，注意要记住<code>多说域名</code>这个字段填写的内容，<code>http://(duoshuo_shortname).duoshuo.com</code>，这个duoshuo_shortname将用于我们站点配置文件中的配置。步骤：在站点配置文件中新建一个<code>duoshuo_shortname</code>的字段，填写注册使用的duoshuo_shortname，例如：</p><pre><code>duoshuo_shortname: linshuhe1</code></pre><h3 id="2-百度统计："><a href="#2-百度统计：" class="headerlink" title="2.百度统计："></a>2.百度统计：</h3><p>用于统计阅读的次数，步骤如下：</p><ul><li>登录百度统计官网：<a href="http://tongji.baidu.com/web/welcome/login" title="百度统计" target="_blank" rel="external">http://tongji.baidu.com/web/welcome/login</a>定位到站点的代码获取页面；</li><li>复制<code>hm.js?</code>后面的那串id；</li><li>在站点配置文件中，新增一个字段<code>baidu_analytics</code>，设置其值为上面复制的百度统计的id</li><li>阅读次数统计，使用LeanCloud来实现，详情查看：<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud</a></li></ul><h3 id="3-Swiftype搜索"><a href="#3-Swiftype搜索" class="headerlink" title="3.Swiftype搜索"></a>3.Swiftype搜索</h3><p>使用 Swiftype 之前需要前往 Swiftype 配置一个搜索引擎。 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考： <a href="http://theme-next.iissnan.com/third-party-services.html#swfitype" title="Swiftype" target="_blank" rel="external">http://theme-next.iissnan.com/third-party-services.html#swfitype</a></p><p><strong>Local Search:</strong>添加百度/谷歌/本地 自定义站点内容搜索：</p><ul><li>安装hexo-generator-search:</li><li>  npm install hexo-generator-search –save</li><li>在站点配置文件中加入：</li><li>  search:<pre><code>path: search.xmlfield: post</code></pre></li></ul><blockquote><p>最终结果可以查看我的博客：<a href="https://linshuhe1.github.io/" target="_blank" rel="external">https://linshuhe1.github.io/</a></p></blockquote><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>可能有人跟我一样遇到了带你麻烦，那就是主页面的文章列表中，博客内容全部显示出来而不是只显示文章一部分和 <code>阅读全文》</code> 按钮，这样显得首页的列表很杂乱和冗长，其实要解决这个问题很简单，只需要在我们编写markdown内容的时候，在适当的位置假如如下标签：</p><pre><code>&lt;!--more--&gt;</code></pre><p>那么在首页显示的部分就是此标签前面的文章内容，而非全文显示：<br><img src="http://i.imgur.com/PIN0F0K.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是hexo：&quot;&gt;&lt;a href=&quot;#什么是hexo：&quot; class=&quot;headerlink&quot; title=&quot;什么是hexo：&quot;&gt;&lt;/a&gt;什么是hexo：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管到github或者Heroku上，类似于jekyll、Octopress、Wordpress等，使用markdown来写文章。hexo的作者是&lt;a href=&quot;https://github.com/tommy351/hexo&quot; title=&quot;@tommy351&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tommy351/hexo&lt;/a&gt;。具有以下几点优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易用性，部署很简单，常用指令有：&lt;code&gt;hexo new&lt;/code&gt;、&lt;code&gt;hexo generate&lt;/code&gt;、&lt;code&gt;hexo server&lt;/code&gt;、&lt;code&gt;hexo deploy&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;轻量级，文件少而小，自定义方便&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;相关知识：&quot;&gt;&lt;a href=&quot;#相关知识：&quot; class=&quot;headerlink&quot; title=&quot;相关知识：&quot;&gt;&lt;/a&gt;相关知识：&lt;/h2&gt;&lt;p&gt;hexo配置过程中使用到了&lt;code&gt;Github&lt;/code&gt;，&lt;code&gt;Git&lt;/code&gt;，&lt;code&gt;Markdown&lt;/code&gt;，&lt;code&gt;Node.js&lt;/code&gt;等相关操作，所以需要很多插件、widget需要自己安装配置。&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux配置Java环境，安装Mysql和Tomcat</title>
    <link href="http://yoursite.com/2017/10/30/Linux%E9%85%8D%E7%BD%AEJava%E7%8E%AF%E5%A2%83%EF%BC%8C%E5%AE%89%E8%A3%85Mysql%E5%92%8CTomcat/"/>
    <id>http://yoursite.com/2017/10/30/Linux配置Java环境，安装Mysql和Tomcat/</id>
    <published>2017-10-29T18:02:00.000Z</published>
    <updated>2017-10-30T02:20:07.620Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、设置Linux字符集为中文"><a href="#1、设置Linux字符集为中文" class="headerlink" title="1、设置Linux字符集为中文"></a>1、设置Linux字符集为中文</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/i18n</div></pre></td></tr></table></figure><p>默认：<br>LANG=”en_US.UTF-8”<br>SYSFONiT=”latarcyrheb-sun16”<br>改为：<br>LANG=”zh_CN.UTF-8”<br>LANGUAGE=”zh_CN.gbk:zh_CN.gbk:zh_CN”<br>SUPPORTED=”zh_CN.gbk:zh_CN:zh:en_US.UTF-8:en_US:en”<br>SYSFONT=”lat0-sun16”<br><a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div></pre></td></tr></table></figure></p><p>export LC_ALL=”zh_CN.UTF-8”<br>export LANG=”zh_CN.UTF-8”</p><h6 id="查看编码"><a href="#查看编码" class="headerlink" title="查看编码"></a>查看编码</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">locale</div></pre></td></tr></table></figure><h6 id="先更新yum源"><a href="#先更新yum源" class="headerlink" title="先更新yum源"></a>先更新yum源</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y update</div></pre></td></tr></table></figure><h4 id="2、安装java环境"><a href="#2、安装java环境" class="headerlink" title="2、安装java环境"></a>2、安装java环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y list java*  //查看yum库中的java安装包</div><div class="line">yum -y install java-1.8.0-openjdk*  //找到一个直接安装</div><div class="line">java -version //查看安装的java版本</div></pre></td></tr></table></figure><h4 id="3、安装mysql"><a href="#3、安装mysql" class="headerlink" title="3、安装mysql"></a>3、安装mysql</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum install mysql-community-server</div></pre></td></tr></table></figure><p>成功安装之后重启mysql服务</p><h6 id="如果yum包中有mysql-community-server，则直接以下命令即可"><a href="#如果yum包中有mysql-community-server，则直接以下命令即可" class="headerlink" title="如果yum包中有mysql-community-server，则直接以下命令即可"></a>如果yum包中有mysql-community-server，则直接以下命令即可</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install mysql*</div></pre></td></tr></table></figure><h6 id="重启mysql"><a href="#重启mysql" class="headerlink" title="重启mysql"></a>重启mysql</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure><h6 id="初次安装mysql是root账户是没有密码的，设置密码的方法"><a href="#初次安装mysql是root账户是没有密码的，设置密码的方法" class="headerlink" title="初次安装mysql是root账户是没有密码的，设置密码的方法"></a>初次安装mysql是root账户是没有密码的，设置密码的方法</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -uroot</div><div class="line"><span class="meta">mysql&gt;</span> set password for 'root'@'localhost' = password('mypasswd');</div><div class="line"><span class="meta">mysql&gt;</span> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'sa' WITH GRANT OPTION;//此种设置方法可以让外部软件navicat连接数据库</div><div class="line"><span class="meta">mysql&gt;</span> exit</div></pre></td></tr></table></figure><p>搞定！</p><h4 id="4、安装tomcat"><a href="#4、安装tomcat" class="headerlink" title="4、安装tomcat"></a>4、安装tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y list tomcat*  //查看yum库中的tomcat安装包</div><div class="line">yum -y install tomcat*  //找到一个直接安装</div><div class="line">service tomcat start //启动tomcat</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、设置Linux字符集为中文&quot;&gt;&lt;a href=&quot;#1、设置Linux字符集为中文&quot; class=&quot;headerlink&quot; title=&quot;1、设置Linux字符集为中文&quot;&gt;&lt;/a&gt;1、设置Linux字符集为中文&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;vim /etc/sysconfig/i18n&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认：&lt;br&gt;LANG=”en_US.UTF-8”&lt;br&gt;SYSFONiT=”latarcyrheb-sun16”&lt;br&gt;改为：&lt;br&gt;LANG=”zh_CN.UTF-8”&lt;br&gt;LANGUAGE=”zh_CN.gbk:zh_CN.gbk:zh_CN”&lt;br&gt;SUPPORTED=”zh_CN.gbk:zh_CN:zh:en_US.UTF-8:en_US:en”&lt;br&gt;SYSFONT=”lat0-sun16”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎光临</title>
    <link href="http://yoursite.com/2017/10/29/hello-world/"/>
    <id>http://yoursite.com/2017/10/29/hello-world/</id>
    <published>2017-10-29T15:26:00.000Z</published>
    <updated>2017-10-30T03:32:15.927Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oym908ihz.bkt.clouddn.com/David%20Gomez%20%202017-10-15%2005-48-27.jpg" alt="此处输入图片的描述"></p><h2 id="欢迎访问SongM的个人博客！！！"><a href="#欢迎访问SongM的个人博客！！！" class="headerlink" title="欢迎访问SongM的个人博客！！！"></a><a href="https://songmin90.github.io" title="欢迎访问SongM的个人博客！！！" target="_blank" rel="external">欢迎访问SongM的个人博客！！！</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://oym908ihz.bkt.clouddn.com/David%20Gomez%20%202017-10-15%2005-48-27.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;欢迎访问SongM的个人博客！！！&quot;&gt;
      
    
    </summary>
    
      <category term="记录" scheme="http://yoursite.com/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="欢迎访问" scheme="http://yoursite.com/tags/%E6%AC%A2%E8%BF%8E%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
</feed>
